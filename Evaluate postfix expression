
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 1000

typedef struct Stack {
    int arr[MAX];
    int top;
} Stack;

void initStack(Stack* s) {
    s->top = -1;
}

int isEmpty(Stack* s) {
    return s->top == -1;
}

void push(Stack* s, int val) {
    s->arr[++(s->top)] = val;
}

int pop(Stack* s) {
    if (!isEmpty(s))
        return s->arr[(s->top)--];
    return 0;
}

int evalRPN(char* arr[], int n) {
    Stack s;
    initStack(&s);

    for (int i = 0; i < n; i++) {
        char* token = arr[i];

        if (strcmp(token, "+") == 0 || strcmp(token, "-") == 0 ||
            strcmp(token, "*") == 0 || strcmp(token, "/") == 0) {
            int b = pop(&s);
            int a = pop(&s);
            int res;

            if (strcmp(token, "+") == 0) res = a + b;
            else if (strcmp(token, "-") == 0) res = a - b;
            else if (strcmp(token, "*") == 0) res = a * b;
            else { 
                res = a / b;
                if ((a % b != 0) && ((a < 0) != (b < 0))) res--; 
            }

            push(&s, res);
        } else {
         
            int num = atoi(token);
            push(&s, num);
        }
    }

    return pop(&s);
}
int main() {
    char* arr[] = {"2", "3", "1", "*", "+", "9", "-"};
    int n = 7;

    int result = evalRPN(arr, n);
    printf("%d\n", result); 

    return 0;
}
